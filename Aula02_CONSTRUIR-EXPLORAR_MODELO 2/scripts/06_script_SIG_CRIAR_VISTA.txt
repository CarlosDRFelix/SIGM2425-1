--#############
--# Paulo Trigo
--#############




--=============
-- Liga��o � BD
--=============
\set dataBase my_gis
;
\set userName postgres
;
\connect :dataBase :userName
;
--==========================
--==========================


-- mais informa��o sobre "client_encoding" em:
-- http://www.postgresql.org/docs/9.4/static/multibyte.html
\encoding WIN1250
;




--=========================================
-- Quais os infant�rios de cada freguesia ?
--=========================================
-- Atencao: a vista deve projectar o atributo "oid" ou uma chave prim�ria
--          do tipo "integer" de modo a ser apresentada no QGis
--=======================================================================




-- 7.a vista v_cli_frg que apresenta “os clientes com filhos em idade escolar que residem até 100m dos infantários da freguesia mais lucrativa”

DROP VIEW IF EXISTS v_filhos_i_escolar;

CREATE VIEW v_filhos_i_escolar AS 
SELECT * FROM Filho
WHERE data_nascimento BETWEEN TO_DATE('01/01/2001', 'DD/MM/YYYY') AND TO_DATE('31/12/2019', 'DD/MM/YYYY');

DROP VIEW IF EXISTS v_cli_frg;

-- CREATE VIEW v_cli_frg()
-- AS
-- SELECT
--;

--SELECT
--FROM
--;


-- 7.b Adicione a vista v_inf_frg que apresenta os clientes que vivem numa freguesia mas estão mais perto de algum infantário de outra freguesia (diferente daquela onde vivem). 

-- Distâncias entre todos os clientes e todos os infantarios, com os nomes das freguesias
DROP VIEW IF EXISTS v_distancias ;

CREATE VIEW v_distancias AS
SELECT
    c.nome AS nome_cliente,
	c.infantario AS infantario_cliente,
    i.nome AS nome_infantario,
    COALESCE(fc.nome, 'Sem Freguesia') AS freguesia_cliente,
    COALESCE(fi.nome, 'Sem Freguesia') AS freguesia_infantario,
    ST_Distance(c.g_cliente, i.g_infantario) AS distancia
FROM 
    Cliente c
CROSS JOIN Infantario i
LEFT JOIN Freguesia fc ON ST_Contains(fc.g_freguesia, c.g_cliente)
LEFT JOIN Freguesia fi ON ST_Contains(fi.g_freguesia, i.g_infantario);

-- view com o infantario mais proximo
DROP VIEW IF EXISTS v_infantario_dists;
CREATE VIEW v_infantario_dists AS
SELECT
    c.nome AS nome_cliente,
	--c.infantario AS infantario_cliente,
    i.nome AS nome_infantario,
    COALESCE(fc.nome, 'Sem Freguesia') AS freguesia_cliente,
    COALESCE(fi.nome, 'Sem Freguesia') AS freguesia_infantario,
    --ST_Distance(c.g_cliente, i.g_infantario) AS distancia,
    MIN(ST_Distance(c.g_cliente, i.g_infantario)) AS menor_distancia,
    (
        SELECT i.nome
        FROM Infantario i
        WHERE ST_Distance(c.g_cliente, i.g_infantario) = (
            SELECT MIN(ST_Distance(c.g_cliente, i2.g_infantario))
            FROM Infantario i2
        )
        LIMIT 1 
    ) AS infantario_mais_proximo  -- nome do infantario mais prox.
FROM
    Cliente c
    CROSS JOIN Infantario i
	LEFT JOIN Freguesia fc ON ST_Contains(fc.g_freguesia, c.g_cliente) -- freguesia do cliente
	LEFT JOIN Freguesia fi ON ST_Contains(fi.g_freguesia, i.g_infantario) -- freguesia do infantario
GROUP BY c.nome, c.id, i.nome, fc.nome, fi.nome, i.g_infantario;  

--7.b

DROP VIEW IF EXISTS v_inf_frg
;

CREATE VIEW v_inf_frg AS
SELECT * FROM v_infantario_dists AS vid
WHERE vid.nome_infantario = vid.infantario_mais_proximo AND vid.freguesia_cliente != vid.freguesia_infantario;



-- CREATE VIEW v_inf_frg( oid, nome_infantario, nome_freguesia_residencia, nome_freguesia_infantario, g_local_cliente )
-- AS
- SELECT ...
;


--SELECT nome_infantario, nome_freguesia_residencia, nome_freguesia_infantario, ST_AsText( g_local_cliente )
--FROM v_inf_frg
;




SELECT
c.nome AS nome_cliente,
i.nome AS nome_infantario,
ST_Distance(c.g_cliente, i.g_infantario) AS distancia
FROM
Cliente AS c,
Infantario AS i
WHERE c.infantario = 'Ursinho';
--WHERE distancia < 100;

